{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADSA,IAAA,IAAA;ACPA,ADOA,ICPM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;ADOtB,ECPuB,IAAI,EAAE,IDO7B,CCPsB;EAAc,ADclC,GCdqC,EAAE,IDcvC,IAAA,CAAoB,IAApB,EAAmC;ACdf,CAAT,CAAb,EDcsB,KAAA,IAAA,GAAA,IAAA;ACXtB,IAAI,ADKF,CCLG,EAAL,CAAQ,QAAR,EAAkB,YAAA;EAChB,OAAO,CAAC,GAAR,CAAY,UAAZ;AACD,CAFD;AAGA,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,YAAA;EAChB,OAAO,CAAC,GAAR,CAAY,UAAZ;AACD,CAFD,GDME,KAAA,MAAA,GAAwC,EAAxC;ACHF,EDKyC,ECLrC,CAAC,EAAL,CAAQ,UAAR,EAAoB,YAAA;EAClB,OAAO,CAAC,GAAR,CAAY,qBAAZ;AACD,CAFD,CDOE,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,QAAJ,EAAoB;ACHtB,IAAI,ADIA,CCJC,MDIM,CCJX,CAAa,GDIG,IAAL,CCJX,ADIqB,QAAV,CAAP;ACHJ,EDIG,CAFD,CCFE,CAAC,OAAL,CAAa,UAAb;;EDME,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,MAAJ,EAAqB;IACnB;;;;;;IAMA,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAzB;EACD,CARD;;EAUA,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC;IACtC,IAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,KAA0B,EAA3C;IACA,QAAQ,CAAC,IAAT,CAAc,QAAd;IACA,KAAK,MAAL,CAAY,SAAZ,IAAyB,QAAzB;EACD,CAJD;;EAMA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAAyB;IACvB,IAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAjB;IAEA,IAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAArC,EAAwC;IAExC,QAAQ,CAAC,OAAT,CAAiB,UAAA,QAAA,EAAQ;MACvB,QAAQ;IACT,CAFD;EAGD,CARD;;EASF,OAAA,IAAA;AAtCA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["interface UserProps {\r\n  /** The ? after the property name makes the propery optional. */\r\n  name?: string;\r\n  age?: number;\r\n}\r\n\r\n/** Type alias for a function that has no arguments and no return value. */\r\ntype Callback = () => void;\r\n\r\nexport class User {\r\n  /** \r\n   * Events property that will be an object that stores events.\r\n   * It will have keys that have an array of callback functions.\r\n  */\r\n  events: { [key: string]: Callback[] } = {};\r\n\r\n  constructor(private data: UserProps) {}\r\n\r\n  get(propName: string): (string | number)   {\r\n    return this.data[propName];\r\n  }\r\n\r\n  set(update: UserProps): void {\r\n    /** \r\n     * The Object.assign() method takes 2 objects as arguments.  \r\n     * It takes all of the properties of the second object and copies\r\n     * them over into the first object.  If a property already \r\n     * exists then it overrides it.\r\n     */    \r\n    Object.assign(this.data, update);\r\n  }\r\n\r\n  on(eventName: string, callback: Callback): void {\r\n    const handlers = this.events[eventName] || [];\r\n    handlers.push(callback);\r\n    this.events[eventName] = handlers;\r\n  }\r\n\r\n  trigger(eventName: string): void {\r\n    const handlers = this.events[eventName];\r\n\r\n    if (!handlers || handlers.length === 0) return;\r\n    \r\n    handlers.forEach(callback => {\r\n      callback();\r\n    });\r\n  }\r\n}","import { User } from './models/User';\r\n\r\nconst user = new User({name: 'Abe', age: 70});\r\n\r\n\r\nuser.on('change', () => {\r\n  console.log('change 1');\r\n});\r\nuser.on('change', () => {\r\n  console.log('change 2');\r\n});\r\nuser.on('fooevent', () => {\r\n  console.log('you are still a foo');\r\n});\r\n\r\nuser.trigger('change');\r\nuser.trigger('fooevent');"]}